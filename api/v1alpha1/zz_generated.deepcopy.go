//go:build !ignore_autogenerated

/*
Copyright 2024.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/types"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AllocationRequest) DeepCopyInto(out *AllocationRequest) {
	*out = *in
	in.Resources.DeepCopyInto(&out.Resources)
	out.PodRef = in.PodRef
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AllocationRequest.
func (in *AllocationRequest) DeepCopy() *AllocationRequest {
	if in == nil {
		return nil
	}
	out := new(AllocationRequest)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AllocationResult) DeepCopyInto(out *AllocationResult) {
	*out = *in
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]v1.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	out.MigPlacement = in.MigPlacement
	out.AllocationStatus = in.AllocationStatus
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AllocationResult.
func (in *AllocationResult) DeepCopy() *AllocationResult {
	if in == nil {
		return nil
	}
	out := new(AllocationResult)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AllocationStatus) DeepCopyInto(out *AllocationStatus) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AllocationStatus.
func (in *AllocationStatus) DeepCopy() *AllocationStatus {
	if in == nil {
		return nil
	}
	out := new(AllocationStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DiscoveredGPU) DeepCopyInto(out *DiscoveredGPU) {
	*out = *in
	out.GPUMemory = in.GPUMemory.DeepCopy()
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DiscoveredGPU.
func (in *DiscoveredGPU) DeepCopy() *DiscoveredGPU {
	if in == nil {
		return nil
	}
	out := new(DiscoveredGPU)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DiscoveredNodeResources) DeepCopyInto(out *DiscoveredNodeResources) {
	*out = *in
	if in.NodeGPUs != nil {
		in, out := &in.NodeGPUs, &out.NodeGPUs
		*out = make([]DiscoveredGPU, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MigPlacement != nil {
		in, out := &in.MigPlacement, &out.MigPlacement
		*out = make(map[string]Mig, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	if in.NodeResources != nil {
		in, out := &in.NodeResources, &out.NodeResources
		*out = make(corev1.ResourceList, len(*in))
		for key, val := range *in {
			(*out)[key] = val.DeepCopy()
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DiscoveredNodeResources.
func (in *DiscoveredNodeResources) DeepCopy() *DiscoveredNodeResources {
	if in == nil {
		return nil
	}
	out := new(DiscoveredNodeResources)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Instaslice) DeepCopyInto(out *Instaslice) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Instaslice.
func (in *Instaslice) DeepCopy() *Instaslice {
	if in == nil {
		return nil
	}
	out := new(Instaslice)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Instaslice) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstasliceList) DeepCopyInto(out *InstasliceList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Instaslice, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstasliceList.
func (in *InstasliceList) DeepCopy() *InstasliceList {
	if in == nil {
		return nil
	}
	out := new(InstasliceList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *InstasliceList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstasliceSpec) DeepCopyInto(out *InstasliceSpec) {
	*out = *in
	if in.PodAllocationRequests != nil {
		in, out := &in.PodAllocationRequests, &out.PodAllocationRequests
		*out = make(map[types.UID]AllocationRequest, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstasliceSpec.
func (in *InstasliceSpec) DeepCopy() *InstasliceSpec {
	if in == nil {
		return nil
	}
	out := new(InstasliceSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstasliceStatus) DeepCopyInto(out *InstasliceStatus) {
	*out = *in
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]v1.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PodAllocationResults != nil {
		in, out := &in.PodAllocationResults, &out.PodAllocationResults
		*out = make(map[types.UID]AllocationResult, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
	}
	in.NodeResources.DeepCopyInto(&out.NodeResources)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstasliceStatus.
func (in *InstasliceStatus) DeepCopy() *InstasliceStatus {
	if in == nil {
		return nil
	}
	out := new(InstasliceStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Mig) DeepCopyInto(out *Mig) {
	*out = *in
	if in.Placements != nil {
		in, out := &in.Placements, &out.Placements
		*out = make([]Placement, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Mig.
func (in *Mig) DeepCopy() *Mig {
	if in == nil {
		return nil
	}
	out := new(Mig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Placement) DeepCopyInto(out *Placement) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Placement.
func (in *Placement) DeepCopy() *Placement {
	if in == nil {
		return nil
	}
	out := new(Placement)
	in.DeepCopyInto(out)
	return out
}
