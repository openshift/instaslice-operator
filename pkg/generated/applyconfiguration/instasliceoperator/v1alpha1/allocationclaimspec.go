/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/api/core/v1"
	types "k8s.io/apimachinery/pkg/types"
)

// AllocationClaimSpecApplyConfiguration represents a declarative configuration of the AllocationClaimSpec type for use
// with apply.
type AllocationClaimSpecApplyConfiguration struct {
	Profile      *string                      `json:"profile,omitempty"`
	PodRef       *v1.ObjectReference          `json:"podRef,omitempty"`
	MigPlacement *PlacementApplyConfiguration `json:"migPlacement,omitempty"`
	GPUUUID      *string                      `json:"gpuUUID,omitempty"`
	Nodename     *types.NodeName              `json:"nodename,omitempty"`
}

// AllocationClaimSpecApplyConfiguration constructs a declarative configuration of the AllocationClaimSpec type for use with
// apply.
func AllocationClaimSpec() *AllocationClaimSpecApplyConfiguration {
	return &AllocationClaimSpecApplyConfiguration{}
}

// WithProfile sets the Profile field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Profile field is set to the value of the last call.
func (b *AllocationClaimSpecApplyConfiguration) WithProfile(value string) *AllocationClaimSpecApplyConfiguration {
	b.Profile = &value
	return b
}

// WithPodRef sets the PodRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PodRef field is set to the value of the last call.
func (b *AllocationClaimSpecApplyConfiguration) WithPodRef(value v1.ObjectReference) *AllocationClaimSpecApplyConfiguration {
	b.PodRef = &value
	return b
}

// WithMigPlacement sets the MigPlacement field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MigPlacement field is set to the value of the last call.
func (b *AllocationClaimSpecApplyConfiguration) WithMigPlacement(value *PlacementApplyConfiguration) *AllocationClaimSpecApplyConfiguration {
	b.MigPlacement = value
	return b
}

// WithGPUUUID sets the GPUUUID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the GPUUUID field is set to the value of the last call.
func (b *AllocationClaimSpecApplyConfiguration) WithGPUUUID(value string) *AllocationClaimSpecApplyConfiguration {
	b.GPUUUID = &value
	return b
}

// WithNodename sets the Nodename field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Nodename field is set to the value of the last call.
func (b *AllocationClaimSpecApplyConfiguration) WithNodename(value types.NodeName) *AllocationClaimSpecApplyConfiguration {
	b.Nodename = &value
	return b
}
